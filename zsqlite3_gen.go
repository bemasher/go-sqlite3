// MACHINE GENERATED BY 'go generate' COMMAND; DO NOT EDIT

package sqlite3

import (
	"syscall"
	"unsafe"
)

var _ unsafe.Pointer

// Do the interface allocations only once for common
// Errno values.
const (
	errnoERROR_IO_PENDING = 997
)

var (
	errERROR_IO_PENDING error = syscall.Errno(errnoERROR_IO_PENDING)
)

// errnoErr returns common boxed Errno values, to prevent
// allocations at runtime.
func errnoErr(e syscall.Errno) error {
	switch e {
	case 0:
		return nil
	case errnoERROR_IO_PENDING:
		return errERROR_IO_PENDING
	}
	// TODO: add more here, after collecting data on the common
	// error values see on Windows. (perhaps when running
	// all.bat?)
	return e
}

var (
	modsqlite3 = syscall.NewLazyDLL("sqlite3.dll")

	procsqlite3_libversion           = modsqlite3.NewProc("sqlite3_libversion")
	procsqlite3_libversion_number    = modsqlite3.NewProc("sqlite3_libversion_number")
	procsqlite3_sourceid             = modsqlite3.NewProc("sqlite3_sourceid")
	procsqlite3_threadsafe           = modsqlite3.NewProc("sqlite3_threadsafe")
	procsqlite3_busy_timeout         = modsqlite3.NewProc("sqlite3_busy_timeout")
	procsqlite3_exec                 = modsqlite3.NewProc("sqlite3_exec")
	procsqlite3_errcode              = modsqlite3.NewProc("sqlite3_errcode")
	procsqlite3_extended_errcode     = modsqlite3.NewProc("sqlite3_extended_errcode")
	procsqlite3_errmsg               = modsqlite3.NewProc("sqlite3_errmsg")
	procsqlite3_errstr               = modsqlite3.NewProc("sqlite3_errstr")
	procsqlite3_open_v2              = modsqlite3.NewProc("sqlite3_open_v2")
	procsqlite3_close_v2             = modsqlite3.NewProc("sqlite3_close_v2")
	procsqlite3_backup_init          = modsqlite3.NewProc("sqlite3_backup_init")
	procsqlite3_backup_pagecount     = modsqlite3.NewProc("sqlite3_backup_pagecount")
	procsqlite3_backup_remaining     = modsqlite3.NewProc("sqlite3_backup_remaining")
	procsqlite3_backup_step          = modsqlite3.NewProc("sqlite3_backup_step")
	procsqlite3_backup_finish        = modsqlite3.NewProc("sqlite3_backup_finish")
	procsqlite3_get_autocommit       = modsqlite3.NewProc("sqlite3_get_autocommit")
	procsqlite3_prepare_v2           = modsqlite3.NewProc("sqlite3_prepare_v2")
	procsqlite3_limit                = modsqlite3.NewProc("sqlite3_limit")
	procsqlite3_finalize             = modsqlite3.NewProc("sqlite3_finalize")
	procsqlite3_bind_parameter_count = modsqlite3.NewProc("sqlite3_bind_parameter_count")
	procsqlite3_reset                = modsqlite3.NewProc("sqlite3_reset")
	procsqlite3_bind_parameter_index = modsqlite3.NewProc("sqlite3_bind_parameter_index")
	procsqlite3_bind_null            = modsqlite3.NewProc("sqlite3_bind_null")
	procsqlite3_bind_blob            = modsqlite3.NewProc("sqlite3_bind_blob")
	procsqlite3_bind_text            = modsqlite3.NewProc("sqlite3_bind_text")
	procsqlite3_bind_double          = modsqlite3.NewProc("sqlite3_bind_double")
	procsqlite3_bind_int             = modsqlite3.NewProc("sqlite3_bind_int")
	procsqlite3_bind_int64           = modsqlite3.NewProc("sqlite3_bind_int64")
	procsqlite3_column_count         = modsqlite3.NewProc("sqlite3_column_count")
	procsqlite3_interrupt            = modsqlite3.NewProc("sqlite3_interrupt")
	procsqlite3_clear_bindings       = modsqlite3.NewProc("sqlite3_clear_bindings")
	procsqlite3_step                 = modsqlite3.NewProc("sqlite3_step")
	procsqlite3_db_handle            = modsqlite3.NewProc("sqlite3_db_handle")
	procsqlite3_last_insert_rowid    = modsqlite3.NewProc("sqlite3_last_insert_rowid")
	procsqlite3_changes              = modsqlite3.NewProc("sqlite3_changes")
	procsqlite3_column_name          = modsqlite3.NewProc("sqlite3_column_name")
	procsqlite3_column_decltype      = modsqlite3.NewProc("sqlite3_column_decltype")
	procsqlite3_column_bytes         = modsqlite3.NewProc("sqlite3_column_bytes")
	procsqlite3_column_blob          = modsqlite3.NewProc("sqlite3_column_blob")
	procsqlite3_column_int64         = modsqlite3.NewProc("sqlite3_column_int64")
	procsqlite3_column_text          = modsqlite3.NewProc("sqlite3_column_text")
	procsqlite3_column_type          = modsqlite3.NewProc("sqlite3_column_type")
	procsqlite3_column_value         = modsqlite3.NewProc("sqlite3_column_value")
)

func sqlite3_libversion() (version string) {
	r0, _, _ := syscall.Syscall(procsqlite3_libversion.Addr(), 0, 0, 0, 0)
	version = UintptrToString(r0)
	return
}

func sqlite3_libversion_number() (version int) {
	r0, _, _ := syscall.Syscall(procsqlite3_libversion_number.Addr(), 0, 0, 0, 0)
	version = int(r0)
	return
}

func sqlite3_sourceid() (sourceidPtr string) {
	r0, _, _ := syscall.Syscall(procsqlite3_sourceid.Addr(), 0, 0, 0, 0)
	sourceidPtr = UintptrToString(r0)
	return
}

func sqlite3_threadsafe() (isThreadSafe bool) {
	r0, _, _ := syscall.Syscall(procsqlite3_threadsafe.Addr(), 0, 0, 0, 0)
	isThreadSafe = r0 != 0
	return
}

func sqlite3_busy_timeout(db sqlite3, ms int) (ret int) {
	r0, _, _ := syscall.Syscall(procsqlite3_busy_timeout.Addr(), 2, uintptr(db), uintptr(ms), 0)
	ret = int(r0)
	return
}

func zsqlite3_exec() {
	syscall.Syscall(procsqlite3_exec.Addr(), 0, 0, 0, 0)
	return
}

func sqlite3_errcode(db sqlite3) (errcode int) {
	r0, _, _ := syscall.Syscall(procsqlite3_errcode.Addr(), 1, uintptr(db), 0, 0)
	errcode = int(r0)
	return
}

func sqlite3_extended_errcode(db sqlite3) (errcode int) {
	r0, _, _ := syscall.Syscall(procsqlite3_extended_errcode.Addr(), 1, uintptr(db), 0, 0)
	errcode = int(r0)
	return
}

func sqlite3_errmsg(db sqlite3) (msg string) {
	r0, _, _ := syscall.Syscall(procsqlite3_errmsg.Addr(), 1, uintptr(db), 0, 0)
	msg = UintptrToString(r0)
	return
}

func sqlite3_errstr(err int) (errStrPtr string) {
	r0, _, _ := syscall.Syscall(procsqlite3_errstr.Addr(), 1, uintptr(err), 0, 0)
	errStrPtr = UintptrToString(r0)
	return
}

func zsqlite3_open_v2() {
	syscall.Syscall(procsqlite3_open_v2.Addr(), 0, 0, 0, 0)
	return
}

func sqlite3_close_v2(db sqlite3) (ret int) {
	r0, _, _ := syscall.Syscall(procsqlite3_close_v2.Addr(), 1, uintptr(db), 0, 0)
	ret = int(r0)
	return
}

func zsqlite3_backup_init() {
	syscall.Syscall(procsqlite3_backup_init.Addr(), 0, 0, 0, 0)
	return
}

func sqlite3_backup_pagecount(b sqlite3_backup) (ret int) {
	r0, _, _ := syscall.Syscall(procsqlite3_backup_pagecount.Addr(), 1, uintptr(b), 0, 0)
	ret = int(r0)
	return
}

func sqlite3_backup_remaining(b sqlite3_backup) (ret int) {
	r0, _, _ := syscall.Syscall(procsqlite3_backup_remaining.Addr(), 1, uintptr(b), 0, 0)
	ret = int(r0)
	return
}

func sqlite3_backup_step(b sqlite3_backup, page int) (ret int) {
	r0, _, _ := syscall.Syscall(procsqlite3_backup_step.Addr(), 2, uintptr(b), uintptr(page), 0)
	ret = int(r0)
	return
}

func sqlite3_backup_finish(b sqlite3_backup) (ret int) {
	r0, _, _ := syscall.Syscall(procsqlite3_backup_finish.Addr(), 1, uintptr(b), 0, 0)
	ret = int(r0)
	return
}

func sqlite3_get_autocommit(db sqlite3) (ret int) {
	r0, _, _ := syscall.Syscall(procsqlite3_get_autocommit.Addr(), 1, uintptr(db), 0, 0)
	ret = int(r0)
	return
}

func zsqlite3_prepare_v2() {
	syscall.Syscall(procsqlite3_prepare_v2.Addr(), 0, 0, 0, 0)
	return
}

func sqlite3_limit(db sqlite3, id int, newVal int) (ret int) {
	r0, _, _ := syscall.Syscall(procsqlite3_limit.Addr(), 3, uintptr(db), uintptr(id), uintptr(newVal))
	ret = int(r0)
	return
}

func sqlite3_finalize(stmt sqlite3_stmt) (ret int) {
	r0, _, _ := syscall.Syscall(procsqlite3_finalize.Addr(), 1, uintptr(stmt), 0, 0)
	ret = int(r0)
	return
}

func sqlite3_bind_parameter_count(stmt sqlite3_stmt) (ret int) {
	r0, _, _ := syscall.Syscall(procsqlite3_bind_parameter_count.Addr(), 1, uintptr(stmt), 0, 0)
	ret = int(r0)
	return
}

func sqlite3_reset(stmt sqlite3_stmt) (ret int) {
	r0, _, _ := syscall.Syscall(procsqlite3_reset.Addr(), 1, uintptr(stmt), 0, 0)
	ret = int(r0)
	return
}

func sqlite3_bind_parameter_index(stmt sqlite3_stmt, name string) (ret int, err error) {
	var _p0 *byte
	_p0, err = syscall.BytePtrFromString(name)
	if err != nil {
		return
	}
	return _sqlite3_bind_parameter_index(stmt, _p0)
}

func _sqlite3_bind_parameter_index(stmt sqlite3_stmt, name *byte) (ret int, err error) {
	r0, _, e1 := syscall.Syscall(procsqlite3_bind_parameter_index.Addr(), 2, uintptr(stmt), uintptr(unsafe.Pointer(name)), 0)
	ret = int(r0)
	if ret == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func sqlite3_bind_null(stmt sqlite3_stmt, ordinal int) (ret int) {
	r0, _, _ := syscall.Syscall(procsqlite3_bind_null.Addr(), 2, uintptr(stmt), uintptr(ordinal), 0)
	ret = int(r0)
	return
}

func zsqlite3_bind_blob() {
	syscall.Syscall(procsqlite3_bind_blob.Addr(), 0, 0, 0, 0)
	return
}

func zsqlite3_bind_text() {
	syscall.Syscall(procsqlite3_bind_text.Addr(), 0, 0, 0, 0)
	return
}

func sqlite3_bind_double(stmt sqlite3_stmt, ordinal int, val float64) (ret int) {
	r0, _, _ := syscall.Syscall(procsqlite3_bind_double.Addr(), 3, uintptr(stmt), uintptr(ordinal), uintptr(val))
	ret = int(r0)
	return
}

func sqlite3_bind_int(stmt sqlite3_stmt, ordinal int, val int) (ret int) {
	r0, _, _ := syscall.Syscall(procsqlite3_bind_int.Addr(), 3, uintptr(stmt), uintptr(ordinal), uintptr(val))
	ret = int(r0)
	return
}

func sqlite3_bind_int64(stmt sqlite3_stmt, ordinal int, val int64) (ret int) {
	r0, _, _ := syscall.Syscall(procsqlite3_bind_int64.Addr(), 3, uintptr(stmt), uintptr(ordinal), uintptr(val))
	ret = int(r0)
	return
}

func sqlite3_column_count(stmt sqlite3_stmt) (ret int) {
	r0, _, _ := syscall.Syscall(procsqlite3_column_count.Addr(), 1, uintptr(stmt), 0, 0)
	ret = int(r0)
	return
}

func sqlite3_interrupt(db sqlite3) {
	syscall.Syscall(procsqlite3_interrupt.Addr(), 1, uintptr(db), 0, 0)
	return
}

func sqlite3_clear_bindings(stmt sqlite3_stmt) (ret int) {
	r0, _, _ := syscall.Syscall(procsqlite3_clear_bindings.Addr(), 1, uintptr(stmt), 0, 0)
	ret = int(r0)
	return
}

func sqlite3_step(stmt sqlite3_stmt) (ret int) {
	r0, _, _ := syscall.Syscall(procsqlite3_step.Addr(), 1, uintptr(stmt), 0, 0)
	ret = int(r0)
	return
}

func sqlite3_db_handle(stmt sqlite3_stmt) (db *sqlite3) {
	r0, _, _ := syscall.Syscall(procsqlite3_db_handle.Addr(), 1, uintptr(stmt), 0, 0)
	db = (*sqlite3)(unsafe.Pointer(r0))
	return
}

func sqlite3_last_insert_rowid(db sqlite3) (rowid int64) {
	r0, _, _ := syscall.Syscall(procsqlite3_last_insert_rowid.Addr(), 1, uintptr(db), 0, 0)
	rowid = int64(r0)
	return
}

func sqlite3_changes(db sqlite3) (changes int64) {
	r0, _, _ := syscall.Syscall(procsqlite3_changes.Addr(), 1, uintptr(db), 0, 0)
	changes = int64(r0)
	return
}

func sqlite3_column_name(stmt sqlite3_stmt, idx int) (name string) {
	r0, _, _ := syscall.Syscall(procsqlite3_column_name.Addr(), 2, uintptr(stmt), uintptr(idx), 0)
	name = UintptrToString(r0)
	return
}

func sqlite3_column_decltype(stmt sqlite3_stmt, idx int) (name string) {
	r0, _, _ := syscall.Syscall(procsqlite3_column_decltype.Addr(), 2, uintptr(stmt), uintptr(idx), 0)
	name = UintptrToString(r0)
	return
}

func sqlite3_column_bytes(stmt sqlite3_stmt, idx int) (ret int) {
	r0, _, _ := syscall.Syscall(procsqlite3_column_bytes.Addr(), 2, uintptr(stmt), uintptr(idx), 0)
	ret = int(r0)
	return
}

func zsqlite3_column_blob() {
	syscall.Syscall(procsqlite3_column_blob.Addr(), 0, 0, 0, 0)
	return
}

func sqlite3_column_int64(stmt sqlite3_stmt, idx int) (ret int64) {
	r0, _, _ := syscall.Syscall(procsqlite3_column_int64.Addr(), 2, uintptr(stmt), uintptr(idx), 0)
	ret = int64(r0)
	return
}

func zsqlite3_column_text() {
	syscall.Syscall(procsqlite3_column_text.Addr(), 0, 0, 0, 0)
	return
}

func sqlite3_column_type(stmt sqlite3_stmt, idx int) (ret int) {
	r0, _, _ := syscall.Syscall(procsqlite3_column_type.Addr(), 2, uintptr(stmt), uintptr(idx), 0)
	ret = int(r0)
	return
}

func sqlite3_column_value(stmt sqlite3_stmt, idx int) (ret uintptr) {
	r0, _, _ := syscall.Syscall(procsqlite3_column_value.Addr(), 2, uintptr(stmt), uintptr(idx), 0)
	ret = uintptr(r0)
	return
}
